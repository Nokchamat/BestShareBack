# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
    
    - name: make application.yml
      run: |
          touch ./.env
          echo "BUCKET_ACCESS_KEY=${{ secrets.BUCKET_ACCESS_KEY }}" >> ./.env
          echo "BUCKET_NAME=${{ secrets.BUCKET_NAME }}" >> ./.env
          echo "BUCKET_SECRET_KEY=${{ secrets.BUCKET_SECRET_KEY }}" >> ./.env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> ./.env 
          echo "DB_URL=${{ secrets.DB_URL }}" >> ./.env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> ./.env
          echo "DEFAULT_IMAGE_URL=${{ secrets.DEFAULT_IMAGE_URL }}" >> ./.env
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> ./.env
      shell: bash

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew build -x test -Pprofile=prod

    - name: Docker build
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -t app .
        docker tag app ${{ secrets.DOCKER_USERNAME }}/bestshare:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/bestshare:latest

    - name: Deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }} # EC2 인스턴스 퍼블릭 DNS
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.PRIVATE_KEY }} # pem 키
        port: ${{ secrets.PORT }} # 접속포트
        # 도커 작업
        script: |
          docker rm -f $(docker ps -qa)
          docker pull ${{ secrets.DOCKER_USERNAME }}/bestshare
          docker run --name app -p 8080:8080 -d ${{ secrets.DOCKER_USERNAME }}/bestshare
          docker image prune -f
